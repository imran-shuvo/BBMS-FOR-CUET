# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2017-04-19 09:30
from __future__ import unicode_literals

from django.db import migrations

# Intervalli minimi previsti dalla legislazione italiana:
# da donazione di sangue intero a donazione di sangue intero:       90 giorni tra una donazione e l'altra; max. 4 volte l'anno per l'uomo, 2 volte l'anno in et<E0> fertile per la donna
# da donazione di sangue intero a donazione di plasma:      1 mese
# da donazione di plasma a donazione di sangue intero:      14 giorni
# da donazione di plasma a donazione di plasma:     14 giorni
# da donazione di sangue intero a donazione di piastrine:   1 mese
# da donazione di piastrine a donazione di sangue intero:   14 giorni
# da donazione di piastrine a donazione di piastrine:       15 giorni (massimo 6 donazioni all'anno)
# da donazione di multicomponenti a donazione di multicomponenti:   3 mesi


def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    Sesso = apps.get_model("blood_donors", "Sesso")
    TipoDonazione = apps.get_model("blood_donors", "TipoDonazione")
    StatoDonatore = apps.get_model("blood_donors", "StatoDonatore")
    db_alias = schema_editor.connection.alias

    Sesso.objects.using(db_alias).bulk_create([
        Sesso(
            descrizione="M",
            gg_da_sangue_a_sangue=90,
            gg_da_sangue_a_plasma=30,
            gg_da_sangue_a_piastrine=30,
            gg_da_plasma_a_sangue=14,
            gg_da_plasma_a_plasma=14,
            gg_da_plasma_a_piastrine=14,
            gg_da_piastrine_a_sangue=14,
            gg_da_piastrine_a_plasma=30,
            gg_da_piastrine_a_piastrine=30,
        ),
        Sesso(
            descrizione="F",
            gg_da_sangue_a_sangue=180,
            gg_da_sangue_a_plasma=30,
            gg_da_sangue_a_piastrine=30,
            gg_da_plasma_a_sangue=14,
            gg_da_plasma_a_plasma=14,
            gg_da_plasma_a_piastrine=14,
            gg_da_piastrine_a_sangue=14,
            gg_da_piastrine_a_plasma=30,
            gg_da_piastrine_a_piastrine=30,
        ),
    ])
    TipoDonazione.objects.using(db_alias).bulk_create([
        TipoDonazione(descrizione="Sangue intero"),
        TipoDonazione(descrizione="Plasma"),
        TipoDonazione(descrizione="Piastrine"),
    ])
    StatoDonatore.objects.using(db_alias).bulk_create([
        StatoDonatore(
            descrizione="Attivo",
            descrizione_estesa="Attivo",
            is_attivo=True
        ),
    ])


def reverse_func(apps, schema_editor):
    # forwards_func() creates instances,
    # so reverse_func() should delete them.
    Sesso = apps.get_model("blood_donors", "Sesso")
    TipoDonazione = apps.get_model("blood_donors", "TipoDonazione")
    StatoDonatore = apps.get_model("blood_donors", "StatoDonatore")
    db_alias = schema_editor.connection.alias

    Sesso.objects.using(db_alias).filter(descrizione="M").delete()
    Sesso.objects.using(db_alias).filter(descrizione="F").delete()
    TipoDonazione.objects.using(db_alias).filter(
        descrizione="Sangue intero").delete()
    TipoDonazione.objects.using(db_alias).filter(descrizione="Plasma").delete()
    TipoDonazione.objects.using(db_alias).filter(
        descrizione="Piastrine").delete()
    StatoDonatore.objects.using(db_alias).filter(
        descrizione="Attivo", descrizione_estesa="Attivo").delete()


class Migration(migrations.Migration):

    dependencies = [
        ('blood_donors', '0002_base_tables'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
